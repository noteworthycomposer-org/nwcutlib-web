local currentVersion = '0.3.0';
local nwctxtSample = require('./sample.nwctxt')

local fileloadList = {
	['outstream'] = require('./outstream.lua'),
	['synthesized-nwc.lua'] = require('nwcutlib/synthesized-nwc.lua'),
	['synthesize.lua'] = require('nwcutlib/synthesize.lua'),
	['simulation.lua'] = require('nwcutlib/simulation.lua'),
	['nwcut.lua'] = require('nwcutlib/nwcut.lua'),
	['abcMake.nw.nwcut.lua'] = require('./abcMake.nw.nwcut.lua')
}

local fengary_loadfile = loadfile
local fengary_dofile = dofile
local fengary_print = print
local smart_loadfile = function(filename,mode,env)
	local m = fileloadList[filename]
	if not m then return fengary_loadfile(filename,mode,env) end
	-- avoid creating a nil default environment
	return env and load(m,filename,mode,env) or load(m,filename,mode)
end

loadfile = smart_loadfile
dofile = function(f)
	if fileloadList[f] then
		local m = smart_loadfile(f)
		return m and m() or nil
	end

	return fengary_dofile(f)
end

local NWOutStream = smart_loadfile('outstream')()

local function getSafeString(s)
	return (type(s) == 'string') and s or ''
end

local function runUserTool(mod,intxt,...)
	arg = {...}
	intxt = tostring(intxt) or ''
	local io_stdout = NWOutStream.new()
	local io_stderr = NWOutStream.new()
	local function stdout_writer(...) io_stdout:write(...) end
	io = {write=stdout_writer,stdout=io_stdout,stderr=io_stderr}
	print = function(...) io_stdout:writeln(...) end

	local doExecuteTool = function()
		dofile('synthesize.lua')(intxt)
		nwcut.run(arg[1])
	end
	local good,failmsg = pcall(doExecuteTool)
	if not good then
		nwcut.status = 1
		io_stderr:writeln('A run-time error was detected')
		io_stderr:writeln(failmsg)
	end

	print = fengary_print
	return {
		status=nwcut.status,
		output=js.tostring(io_stdout),
		error=js.tostring(io_stderr)
	}
end

local nwc2abc =  {
	version = currentVersion,
	['nwctxtSample'] = nwctxtSample,
	convert = function(mod,nwctxt,barsPerLine)
		local r = runUserTool(mod,nwctxt,'abcMake.nw.nwcut.lua',tonumber(barsPerLine) or 5)
		return js.createproxy(r,'object')
	end
}

js.global.nwc2abc = js.createproxy(nwc2abc,'object')
